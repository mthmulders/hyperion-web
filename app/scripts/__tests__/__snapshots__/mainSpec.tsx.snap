exports[`<Main /> should render application components 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }>
    <div>
        <AppBar
            onLeftIconButtonTouchTap={[Function]}
            showMenuIconButton={true}
            title="Υπερίων"
            zDepth={1} />
        <Drawer
            disableSwipeToOpen={false}
            docked={false}
            onRequestChange={[Function]}
            open={false}
            openSecondary={false}
            swipeAreaWidth={30}
            width={null}
            zDepth={2} />
        <Router
            history={
                Object {
                    "createHref": [Function],
                    "createKey": [Function],
                    "createLocation": [Function],
                    "createPath": [Function],
                    "getCurrentLocation": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "listen": [Function],
                    "listenBefore": [Function],
                    "push": [Function],
                    "replace": [Function],
                    "transitionTo": [Function],
                    "unsubscribe": [Function],
                  }
            }
            render={[Function]}>
            <Route
                component={[Function]}
                path="/" />
        </Router>
    </div>
</Provider>,
  "nodes": Array [
    <Provider
      store={
            Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                }
      }>
      <div>
            <AppBar
                  onLeftIconButtonTouchTap={[Function]}
                  showMenuIconButton={true}
                  title="Υπερίων"
                  zDepth={1} />
            <Drawer
                  disableSwipeToOpen={false}
                  docked={false}
                  onRequestChange={[Function]}
                  open={false}
                  openSecondary={false}
                  swipeAreaWidth={30}
                  width={null}
                  zDepth={2} />
            <Router
                  history={
                        Object {
                              "createHref": [Function],
                              "createKey": [Function],
                              "createLocation": [Function],
                              "createPath": [Function],
                              "getCurrentLocation": [Function],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "listen": [Function],
                              "listenBefore": [Function],
                              "push": [Function],
                              "replace": [Function],
                              "transitionTo": [Function],
                              "unsubscribe": [Function],
                            }
                  }
                  render={[Function]}>
                  <Route
                        component={[Function]}
                        path="/" />
            </Router>
      </div>
</Provider>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Main />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Main {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "open": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Provider
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }>
          <div>
                    <AppBar
                              onLeftIconButtonTouchTap={[Function]}
                              showMenuIconButton={true}
                              title="Υπερίων"
                              zDepth={1} />
                    <Drawer
                              disableSwipeToOpen={false}
                              docked={false}
                              onRequestChange={[Function]}
                              open={false}
                              openSecondary={false}
                              swipeAreaWidth={30}
                              width={null}
                              zDepth={2} />
                    <Router
                              history={
                                        Object {
                                                  "createHref": [Function],
                                                  "createKey": [Function],
                                                  "createLocation": [Function],
                                                  "createPath": [Function],
                                                  "getCurrentLocation": [Function],
                                                  "go": [Function],
                                                  "goBack": [Function],
                                                  "goForward": [Function],
                                                  "listen": [Function],
                                                  "listenBefore": [Function],
                                                  "push": [Function],
                                                  "replace": [Function],
                                                  "transitionTo": [Function],
                                                  "unsubscribe": [Function],
                                                }
                              }
                              render={[Function]}>
                              <Route
                                        component={[Function]}
                                        path="/" />
                    </Router>
          </div>
</Provider>,
        "_debugID": 2,
        "_renderedOutput": <Provider
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }>
          <div>
                    <AppBar
                              onLeftIconButtonTouchTap={[Function]}
                              showMenuIconButton={true}
                              title="Υπερίων"
                              zDepth={1} />
                    <Drawer
                              disableSwipeToOpen={false}
                              docked={false}
                              onRequestChange={[Function]}
                              open={false}
                              openSecondary={false}
                              swipeAreaWidth={30}
                              width={null}
                              zDepth={2} />
                    <Router
                              history={
                                        Object {
                                                  "createHref": [Function],
                                                  "createKey": [Function],
                                                  "createLocation": [Function],
                                                  "createPath": [Function],
                                                  "getCurrentLocation": [Function],
                                                  "go": [Function],
                                                  "goBack": [Function],
                                                  "goForward": [Function],
                                                  "listen": [Function],
                                                  "listenBefore": [Function],
                                                  "push": [Function],
                                                  "replace": [Function],
                                                  "transitionTo": [Function],
                                                  "unsubscribe": [Function],
                                                }
                              }
                              render={[Function]}>
                              <Route
                                        component={[Function]}
                                        path="/" />
                    </Router>
          </div>
</Provider>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Main />,
}
`;
